import os
from argparse import Parser
from . import Database
from . import Statement
from . import Type

DATABASE_FILENAME = "the.db"

def do_create():
    database = Database(DATABASE_FILENAME)
    database.execute("CREATE TABLE tab(foo, bar, baz)")
    print(f"Database {DATABASE_FILENAME} created.")

def do_destroy():
    os.remove(DATABASE_FILENAME)
    print(f"Database {DATABASE_FILENAME} destroyed.")

def do_insert():
    database = Database(DATABASE_FILENAME)

    # First and second insertions. It is not recommended to insert
    # rows with execute(). Use prepared statements instead (see
    # below).
    database.execute("INSERT INTO tab VALUES(1, 'one', null)")
    database.execute("INSERT INTO tab VALUES(2,  2.2 ,'two')")

    # Insert using a prepared statement, which is faster (only parse
    # once) and safer than using execute() as above.
    statement = database.prepare("INSERT INTO tab VALUES(?, ?, ?)")

    # Third insertion.
    statement.bind_int(1, 3)
    statement.bind_string(2, "three")
    statement.bind_int(3, 333)
    statement.execute()

    # Fourth insertion.
    statement.bind_int(1, 4)
    statement.bind_string(2, "four")
    statement.bind_null(3)
    statement.execute()

    print("Four rows inserted.")

def print_column_value(statement: Statement, column: i32):
    print("  ", end="")

    column_type = statement.column_type(column)

    if column_type == Type.INTEGER:
        print(statement.column_int(column))
    elif column_type == Type.FLOAT:
        print(statement.column_float(column))
    elif column_type == Type.STRING:
        print(statement.column_string(column))
    elif column_type == Type.NULL:
        print("null")
    elif column_type == Type.BLOB:
        print("blob")

def do_select():
    database = Database(DATABASE_FILENAME)
    statement = database.prepare("SELECT * FROM tab WHERE foo >= ? ORDER BY foo")
    statement.bind_int(1, 2)
    row = 1

    while statement.fetch():
        print(f"Row {row}:")

        for column in range(3):
            print_column_value(statement, column)

        row += 1

def main(argv: [string]):
    parser = Parser("sqlite")
    create = parser.add_subcommand("create")
    destroy = parser.add_subcommand("destroy")
    insert = parser.add_subcommand("insert")
    select = parser.add_subcommand("select")
    subcommand, _ = parser.parse(argv).subcommand()

    if subcommand == "create":
        do_create()
    elif subcommand == "destroy":
        do_destroy()
    elif subcommand == "insert":
        do_insert()
    elif subcommand == "select":
        do_select()
