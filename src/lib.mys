from os import rm

c"""header-before-namespace
#include <sqlite3.h>
"""

@enum
class _Result:
    Ok = c"SQLITE_OK"
    Row = c"SQLITE_ROW"
    Done = c"SQLITE_DONE"

@enum(u8)
class Type:
    Integer = c"SQLITE_INTEGER"
    Float = c"SQLITE_FLOAT"
    String = c"SQLITE_TEXT"
    Null = c"SQLITE_NULL"
    Blob = c"SQLITE_BLOB"

class SqlError(Error):
    message: string

class Database:
    c"sqlite3 *database_p;"

    def __init__(self, path: string):
        path_utf8 = path.to_utf8()
        path_utf8 += 0
        res = 0

        c"""
        sqlite3_open((const char *)path_utf8.m_bytes->data(), &this->database_p);

        if (this->database_p == NULL) {
            res = 1;
        }
        """

        if res != 0:
            raise SqlError("sqlite3_open()")

    def __del__(self):
        c"sqlite3_close(this->database_p);"

    def execute(self, sql: string):
        """Execute given statement.

        """

        sql_utf8 = sql.to_utf8()
        sql_utf8 += 0
        res = _Result.Ok

        c"""
        res = sqlite3_exec(this->database_p,
                           (const char *)sql_utf8.m_bytes->data(),
                           NULL,
                           NULL,
                           NULL);
        """

        if res != _Result.Ok:
            raise SqlError(_create_error_message(self))

    def prepare(self, sql: string) -> Statement:
        """Prepare a statement. Safer than execute(), and faster if used more
        than once.

        """

        return Statement(sql, self)

def _create_error_message(database: Database) -> string:
    message: string = None

    c"message = String(sqlite3_errmsg(database->database_p));"

    return message

class Statement:
    database: Database
    _number_of_columns: u32

    c"sqlite3_stmt *stmt_p;"

    def __init__(self, sql: string, database: Database):
        self.database = database
        self._number_of_columns = 0
        sql_utf8 = sql.to_utf8()
        sql_utf8 += 0
        res = _Result.Ok

        c"""
        res = sqlite3_prepare(database->database_p,
                              (const char *)sql_utf8.m_bytes->data(),
                              -1,
                              &this->stmt_p,
                              NULL);
        """

        if res != _Result.Ok:
            raise SqlError(_create_error_message(database))

    def __del__(self):
        c"sqlite3_finalize(this->stmt_p);"

    def bind_int(self, column: u32, value: i64):
        """Bind given integer to given column.

        """

        res = _Result.Ok

        c"res = sqlite3_bind_int64(this->stmt_p, column, value);"

        if res != _Result.Ok:
            raise SqlError(_create_error_message(self.database))

    def bind_float(self, column: u32, value: f64):
        """Bind given float to given column.

        """

        res = _Result.Ok

        c"res = sqlite3_bind_double(this->stmt_p, column, value);"

        if res != _Result.Ok:
            raise SqlError(_create_error_message(self.database))

    def bind_string(self, column: u32, value: string):
        """Bind given string to given column.

        """

        value_utf8 = value.to_utf8()
        value_utf8 += 0
        res = _Result.Ok

        c"""
        res = sqlite3_bind_text(this->stmt_p,
                                column,
                                (const char *)value_utf8.m_bytes->data(),
                                -1,
                                SQLITE_TRANSIENT);
        """

        if res != _Result.Ok:
            raise SqlError(_create_error_message(self.database))

    def bind_null(self, column: u32):
        """Bind null to given column.

        """

        res = _Result.Ok

        c"res = sqlite3_bind_null(this->stmt_p, column);"

        if res != _Result.Ok:
            raise SqlError(_create_error_message(self.database))

    def execute(self):
        """Execute the statement. Bind any values to columns before executing
        it.

        """

        result = self._step()

        try:
            if result != _Result.Done:
                message = _create_error_message(self.database)

                raise SqlError(_create_error_message(self.database))
        finally:
            self._reset()

    def fetch(self) -> bool:
        """Fetch the next row from the database. Returns ``True`` if a row was
        fetched and ``False`` when there are no more rows
        available. If fetched, get column values with column_*()
        methods.

        """

        result = self._step()

        if result == _Result.Row:
            c"this->_number_of_columns = sqlite3_data_count(this->stmt_p); "

            return True
        else:
            self._reset()

            if result == _Result.Done:
                return False
            else:
                raise SqlError("fetch")

    def _step(self) -> _Result:
        res = 0

        c"res = sqlite3_step(this->stmt_p);"

        return _Result(res)

    def _reset(self):
        self._number_of_columns = 0

        c"sqlite3_reset(this->stmt_p);"

    def column_type(self, column: u32) -> Type:
        """Get the type of given column.

        """

        if column >= self._number_of_columns:
            raise SqlError("bad column")

        ctype: u8 = 0

        c"ctype = sqlite3_column_type(this->stmt_p, column);"

        return Type(ctype)

    def column_int(self, column: u32) -> i64:
        """Get the value of given column as an integer.

        """

        if column >= self._number_of_columns:
            raise SqlError("bad column")

        value = 0

        c"value = sqlite3_column_int64(this->stmt_p, column);"

        return value

    def column_float(self, column: u32) -> f64:
        """Get the value of given column as a float.

        """

        if column >= self._number_of_columns:
            raise SqlError("bad column")

        value = 0.0

        c"value = sqlite3_column_double(this->stmt_p, column);"

        return value

    def column_string(self, column: u32) -> string:
        """Get the value of given column as a string.

        """

        if column >= self._number_of_columns:
            raise SqlError("bad column")

        value: string = None

        c"value = String((char *)sqlite3_column_text(this->stmt_p, column));"

        return value

    def column_value_string(self, column: u32) -> string:
        """Get given columns value as a string.

        """

        column_type = self.column_type(column)

        if column_type == Type.Integer:
            return str(self.column_int(column))
        elif column_type == Type.Float:
            return str(self.column_float(column))
        elif column_type == Type.String:
            return f"\"{self.column_string(column)}\""
        elif column_type == Type.Null:
            return "null"
        elif column_type == Type.Blob:
            return "blob"
        else:
            raise SqlError(f"invalid column type {column_type}")

@test
def test_basics():
    rm("the.db", force=True)

    database = Database("the.db")

    database.execute("CREATE TABLE tab(foo, bar, baz)")
    database.execute("INSERT INTO tab VALUES(1, 'one', null)")
    database.execute("INSERT INTO tab VALUES(2,  2.2, 'two')")
    database.execute("INSERT INTO tab VALUES(3,  'three', null)")

    statement = database.prepare("SELECT * FROM tab WHERE foo >= ? ORDER BY foo")
    statement.bind_int(1, 2)

    assert statement.fetch()
    assert statement.column_type(0) == Type.Integer
    assert statement.column_int(0) == 2
    assert statement.column_type(1) == Type.Float
    assert statement.column_float(1) == 2.2
    assert statement.column_type(2) == Type.String
    assert statement.column_string(2) == "two"

    assert statement.fetch()
    assert statement.column_type(0) == Type.Integer
    assert statement.column_int(0) == 3
    assert statement.column_type(1) == Type.String
    assert statement.column_string(1) == "three"
    assert statement.column_type(2) == Type.Null

    assert not statement.fetch()

    rm("the.db", force=True)

@test
def test_advanced():
    rm("the.db", force=True)

    database = Database("the.db")

    database.execute("CREATE TABLE tab(foo, bar, baz)")
    database.execute("INSERT INTO tab VALUES(1, 'one', null)")
    database.execute("INSERT INTO tab VALUES(2,  2.2, 'two')")

    statement = database.prepare("INSERT INTO tab VALUES(?, ?, ?)")

    statement.bind_int(1, 3)
    statement.bind_string(2, "three")
    statement.bind_int(3, 333)
    statement.execute()

    statement.bind_int(1, 4)
    statement.bind_string(2, "four")
    statement.bind_null(3)
    statement.execute()

    statement = database.prepare("SELECT * FROM tab WHERE foo >= ? ORDER BY foo")
    statement.bind_int(1, 2)

    assert statement.fetch()
    assert statement.column_type(0) == Type.Integer
    assert statement.column_int(0) == 2
    assert statement.column_type(1) == Type.Float
    assert statement.column_float(1) == 2.2
    assert statement.column_type(2) == Type.String
    assert statement.column_string(2) == "two"

    assert statement.fetch()
    assert statement.column_type(0) == Type.Integer
    assert statement.column_int(0) == 3
    assert statement.column_type(1) == Type.String
    assert statement.column_string(1) == "three"
    assert statement.column_type(2) == Type.Integer
    assert statement.column_int(2) == 333

    assert statement.fetch()
    assert statement.column_type(0) == Type.Integer
    assert statement.column_int(0) == 4
    assert statement.column_type(1) == Type.String
    assert statement.column_string(1) == "four"
    assert statement.column_type(2) == Type.Null

    assert not statement.fetch()

    rm("the.db", force=True)

@test
def test_try_to_create_existing_table():
    rm("the.db", force=True)

    database = Database("the.db")

    database.execute("CREATE TABLE tab(foo, bar, baz)")
    message: string = None

    try:
        database.execute("CREATE TABLE tab(foo, bar, baz)")
    except SqlError as e:
        message = e.message

    assert message == "table tab already exists"

    rm("the.db", force=True)
