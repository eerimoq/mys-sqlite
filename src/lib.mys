"""mys-embedded-c++-before-namespace
#include <sqlite3.h>
"""

@enum
class _Result:
    Ok = c"SQLITE_OK"
    Row = c"SQLITE_ROW"
    Done = c"SQLITE_DONE"

@enum(u8)
class Type:
    Integer = c"SQLITE_INTEGER"
    Float = c"SQLITE_FLOAT"
    String = c"SQLITE_TEXT"
    Null = c"SQLITE_NULL"
    Blob = c"SQLITE_BLOB"

class SqlError(Error):
    message: string

class Database:
    c"void *database_p;"

    def __init__(self, path: string):
        pass

    def __destroy__(self):
        pass

    def execute(self, sql: string):
        """Execute the statement.

        """

        raise NotImplementedError()

    def prepare(self, sql: string) -> Statement:
        """Prepare a statement.

        """

        return Statement(sql, self)

class Statement:
    database: Database
    _number_of_columns: u32

    c"void *stmt_p;"

    def __init__(self, sql: string, database: Database):
        self.database = database
        self._number_of_columns = 0
        res = 0

        c"res = sqlite3_prepare(sql, &this->stmt_p);"

        if res != _Result.OK:
            raise SqlError()

    def __del__(self):
        c"sqlite3_finalize(this->stmt_p);"

    def bind_int(self, column: u32, value: i64):
        res = 0

        c"res = sqlite3_bind_int64(this->stmt_p, column, value);"

        if res != _Result.OK:
            raise SqlError()

    def bind_float(self, column: u32, value: f64):
        res = 0

        c"res = sqlite3_bind_double(this->stmt_p, column, value);"

        if res != _Result.OK:
            raise SqlError()

    def bind_string(self, column: u32, value: string):
        value_utf8 = value.to_utf8()
        res = 0

        c"""
        res = sqlite3_bind_text(this->stmt_p,
                                column,
                                value_utf8->buf_p,
                                SQLITE_TRANSIENT);
        """

        if res != _Result.OK:
            raise SqlError()

    def bind_null(self, column: u32):
        res = 0

        c"res = sqlite3_bind_null(this->stmt_p, column);"

        if res != _Result.OK:
            raise SqlError()

    def execute(self):
        """Execute the statement.

        """

        result = self._step()
        self._reset()

        if result != _Result.OK:
            raise SqlError()

    def fetch(self) -> bool:
        """Fetch the next row from the database. Returns ``True`` if a row was
        fetched and ``False`` when there are no more rows available.

        """

        result = self._step()

        if result == _Result.ROW:
            c"""
            this->_number_of_columns = sqlite3_data_count(this->stmt_p);
            """

            return True
        else:
            self._reset()

            if result == _Result.DONE:
                return False
            else:
                raise SqlError()

    def _step(self) -> _Result:
        res = 0

        c"res = sqlite3_step(this->stmt_p);"

        return _Result(res)

    def _reset(self):
        self._number_of_columns = 0

        c"sqlite3_reset(this->stmt_p);"

    def column_type(self, column: u32) -> Type:
        """Get the type of given column.

        """

        if column >= self._number_of_columns:
            raise SqlError()

        c"""
        column_type = sqlite3_column_type(this->stmt_p, column);
        """

        return Type(column_type)

    def column_int(self, column: u32) -> i64:
        """Get the value of given column as an integer.

        """

        if column >= self._number_of_columns:
            raise SqlError()

        value = 0

        c"""
        value = sqlite3_column_int64(this->stmt_p, column);
        """

        return value

    def column_float(self, column: u32) -> f64:
        """Get the value of given column as a float.

        """

        if column >= self._number_of_columns:
            raise SqlError()

        value = 0.0

        c"""
        value = sqlite3_column_double(this->stmt_p, column);
        """

        return value

    def column_string(self, column: u32) -> string:
        """Get the value of given column as a string.

        """

        if column >= self._number_of_columns:
            raise SqlError()

        value: string = None

        c"value = String(sqlite3_column_text(this->stmt_p, column));"

        return value
